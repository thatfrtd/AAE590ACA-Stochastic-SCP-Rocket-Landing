
# Auto-generated by CVXPYgen on June 13, 2025 at 10:35:46.
# Content: Instructions for build file generation.

cmake_minimum_required (VERSION 3.5)

project (cvxpygen)

# compiler configuration
if (NOT ${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
    set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O3")
    set (CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -O0 -g")
    set (CMAKE_C_STANDARD_LIBRARIES "${CMAKE_C_STANDARD_LIBRARIES} -lm")
endif()
if(${CMAKE_SYSTEM_NAME} STREQUAL "Darwin" AND ${CMAKE_SYSTEM_PROCESSOR} STREQUAL "arm64")
    message(STATUS "Apple Silicon detected: Configuring build for arm64")
    set(ARM64 TRUE)
else()
    set(ARM64 FALSE)
endif()
set (CMAKE_POSITION_INDEPENDENT_CODE ON)  # -fPIC
set (LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/out)

# subdirectory with canonical solver code
add_subdirectory (solver_code)

# list with all directories including header files, passed to parent scope
list (APPEND
      cpg_include
      ${CMAKE_CURRENT_SOURCE_DIR}/include
      ${CMAKE_CURRENT_SOURCE_DIR}/solver_code/include
      ${CMAKE_CURRENT_SOURCE_DIR}/solver_code/lib/amd
      ${CMAKE_CURRENT_SOURCE_DIR}/solver_code/lib/qdldl/include
)
set (cpg_include "${cpg_include}" PARENT_SCOPE)

# list with all header files, passed to parent scope
list (APPEND
      cpg_head
      ${CMAKE_CURRENT_SOURCE_DIR}/include/cpg_workspace.h
      ${CMAKE_CURRENT_SOURCE_DIR}/include/cpg_solve.h
      ${solver_head}
)
set (cpg_head "${cpg_head}" PARENT_SCOPE)

# list with all source files, passed to parent scope
list (APPEND
      cpg_src
      ${CMAKE_CURRENT_SOURCE_DIR}/src/cpg_workspace.c
      ${CMAKE_CURRENT_SOURCE_DIR}/src/cpg_solve.c
      ${solver_src}
)
set (cpg_src "${cpg_src}" PARENT_SCOPE)

# directories including header files
include_directories (${cpg_include})

# example executable target
add_executable (cpg_example ${cpg_head} ${cpg_src} ${CMAKE_CURRENT_SOURCE_DIR}/src/cpg_example.c)
target_link_libraries(cpg_example qocostatic)

# static library target for python extension module
add_library (cpg STATIC ${cpg_head} ${cpg_src})
target_link_libraries(cpg qocostatic)
