
/*
Auto-generated by CVXPYgen on June 13, 2025 at 10:35:46.
Content: Declarations for Python binding with pybind11.
*/

// User-defined parameters
struct CPG_Params_cpp_t {
    std::array<double, 49> Ak_0;
    std::array<double, 21> Bk_minus_0;
    std::array<double, 21> Bk_plus_0;
    std::array<double, 98> ck;
    std::array<double, 49> Ak_1;
    std::array<double, 21> Bk_minus_1;
    std::array<double, 21> Bk_plus_1;
    std::array<double, 49> Ak_2;
    std::array<double, 21> Bk_minus_2;
    std::array<double, 21> Bk_plus_2;
    std::array<double, 49> Ak_3;
    std::array<double, 21> Bk_minus_3;
    std::array<double, 21> Bk_plus_3;
    std::array<double, 49> Ak_4;
    std::array<double, 21> Bk_minus_4;
    std::array<double, 21> Bk_plus_4;
    std::array<double, 49> Ak_5;
    std::array<double, 21> Bk_minus_5;
    std::array<double, 21> Bk_plus_5;
    std::array<double, 49> Ak_6;
    std::array<double, 21> Bk_minus_6;
    std::array<double, 21> Bk_plus_6;
    std::array<double, 49> Ak_7;
    std::array<double, 21> Bk_minus_7;
    std::array<double, 21> Bk_plus_7;
    std::array<double, 49> Ak_8;
    std::array<double, 21> Bk_minus_8;
    std::array<double, 21> Bk_plus_8;
    std::array<double, 49> Ak_9;
    std::array<double, 21> Bk_minus_9;
    std::array<double, 21> Bk_plus_9;
    std::array<double, 49> Ak_10;
    std::array<double, 21> Bk_minus_10;
    std::array<double, 21> Bk_plus_10;
    std::array<double, 49> Ak_11;
    std::array<double, 21> Bk_minus_11;
    std::array<double, 21> Bk_plus_11;
    std::array<double, 49> Ak_12;
    std::array<double, 21> Bk_minus_12;
    std::array<double, 21> Bk_plus_12;
    std::array<double, 49> Ak_13;
    std::array<double, 21> Bk_minus_13;
    std::array<double, 21> Bk_plus_13;
    std::array<double, 7> x_0;
    std::array<double, 105> x_ref;
    std::array<double, 45> u_ref;
};

// Flags for updated user-defined parameters
struct CPG_Updated_cpp_t {
    bool Ak_0;
    bool Bk_minus_0;
    bool Bk_plus_0;
    bool ck;
    bool Ak_1;
    bool Bk_minus_1;
    bool Bk_plus_1;
    bool Ak_2;
    bool Bk_minus_2;
    bool Bk_plus_2;
    bool Ak_3;
    bool Bk_minus_3;
    bool Bk_plus_3;
    bool Ak_4;
    bool Bk_minus_4;
    bool Bk_plus_4;
    bool Ak_5;
    bool Bk_minus_5;
    bool Bk_plus_5;
    bool Ak_6;
    bool Bk_minus_6;
    bool Bk_plus_6;
    bool Ak_7;
    bool Bk_minus_7;
    bool Bk_plus_7;
    bool Ak_8;
    bool Bk_minus_8;
    bool Bk_plus_8;
    bool Ak_9;
    bool Bk_minus_9;
    bool Bk_plus_9;
    bool Ak_10;
    bool Bk_minus_10;
    bool Bk_plus_10;
    bool Ak_11;
    bool Bk_minus_11;
    bool Bk_plus_11;
    bool Ak_12;
    bool Bk_minus_12;
    bool Bk_plus_12;
    bool Ak_13;
    bool Bk_minus_13;
    bool Bk_plus_13;
    bool x_0;
    bool x_ref;
    bool u_ref;
};

// Primal solution
struct CPG_Prim_cpp_t {
    std::array<double, 45> U;
    std::array<double, 2> var1376;
    std::array<double, 98> V;
    std::array<double, 7> v_0;
    std::array<double, 6> v_N;
    std::array<double, 15> eta;
    std::array<double, 105> X;
};

// Dual solution
struct CPG_Dual_cpp_t {
    std::array<double, 7> d0;
    std::array<double, 7> d1;
    std::array<double, 7> d2;
    std::array<double, 7> d3;
    std::array<double, 7> d4;
    std::array<double, 7> d5;
    std::array<double, 7> d6;
    std::array<double, 7> d7;
    std::array<double, 7> d8;
    std::array<double, 7> d9;
    std::array<double, 7> d10;
    std::array<double, 7> d11;
    std::array<double, 7> d12;
    std::array<double, 7> d13;
    std::array<double, 15> d14;
    std::array<double, 15> d15;
    std::array<double, 15> d16;
    std::array<double, 15> d17;
    std::array<double, 15> d18;
    std::array<double, 15> d19;
    std::array<double, 15> d20;
    std::array<double, 2> d21;
    std::array<double, 49> d22;
    std::array<double, 4> d23;
    std::array<double, 4> d24;
    double d25;
    double d26;
    std::array<double, 15> d27;
};

// Solver information
struct CPG_Info_cpp_t {
    double obj_val;
    int iter;
    int status;
    double pri_res;
    double dua_res;
    double time;
};

// Solution and solver information
struct CPG_Result_cpp_t {
    CPG_Prim_cpp_t prim;
    CPG_Dual_cpp_t dual;
    CPG_Info_cpp_t info;
};

// Main solve function
CPG_Result_cpp_t solve_cpp(struct CPG_Updated_cpp_t& CPG_Updated_cpp, struct CPG_Params_cpp_t& CPG_Params_cpp);
