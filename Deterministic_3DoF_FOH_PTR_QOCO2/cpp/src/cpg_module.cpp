
/*
Auto-generated by CVXPYgen on June 13, 2025 at 10:35:46.
Content: Python binding with pybind11.
*/

#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <ctime>
#include "cpg_module.hpp"

extern "C" {
    #include "include/cpg_workspace.h"
    #include "include/cpg_solve.h"
}

namespace py = pybind11;

static int i;

CPG_Result_cpp_t solve_cpp(struct CPG_Updated_cpp_t& CPG_Updated_cpp, struct CPG_Params_cpp_t& CPG_Params_cpp){

    // Pass changed user-defined parameter values to the solver
    if (CPG_Updated_cpp.Ak_0) {
        for(i=0; i<49; i++) {
            cpg_update_Ak_0(i, CPG_Params_cpp.Ak_0[i]);
        }
    }
    if (CPG_Updated_cpp.Bk_minus_0) {
        for(i=0; i<21; i++) {
            cpg_update_Bk_minus_0(i, CPG_Params_cpp.Bk_minus_0[i]);
        }
    }
    if (CPG_Updated_cpp.Bk_plus_0) {
        for(i=0; i<21; i++) {
            cpg_update_Bk_plus_0(i, CPG_Params_cpp.Bk_plus_0[i]);
        }
    }
    if (CPG_Updated_cpp.ck) {
        for(i=0; i<98; i++) {
            cpg_update_ck(i, CPG_Params_cpp.ck[i]);
        }
    }
    if (CPG_Updated_cpp.Ak_1) {
        for(i=0; i<49; i++) {
            cpg_update_Ak_1(i, CPG_Params_cpp.Ak_1[i]);
        }
    }
    if (CPG_Updated_cpp.Bk_minus_1) {
        for(i=0; i<21; i++) {
            cpg_update_Bk_minus_1(i, CPG_Params_cpp.Bk_minus_1[i]);
        }
    }
    if (CPG_Updated_cpp.Bk_plus_1) {
        for(i=0; i<21; i++) {
            cpg_update_Bk_plus_1(i, CPG_Params_cpp.Bk_plus_1[i]);
        }
    }
    if (CPG_Updated_cpp.Ak_2) {
        for(i=0; i<49; i++) {
            cpg_update_Ak_2(i, CPG_Params_cpp.Ak_2[i]);
        }
    }
    if (CPG_Updated_cpp.Bk_minus_2) {
        for(i=0; i<21; i++) {
            cpg_update_Bk_minus_2(i, CPG_Params_cpp.Bk_minus_2[i]);
        }
    }
    if (CPG_Updated_cpp.Bk_plus_2) {
        for(i=0; i<21; i++) {
            cpg_update_Bk_plus_2(i, CPG_Params_cpp.Bk_plus_2[i]);
        }
    }
    if (CPG_Updated_cpp.Ak_3) {
        for(i=0; i<49; i++) {
            cpg_update_Ak_3(i, CPG_Params_cpp.Ak_3[i]);
        }
    }
    if (CPG_Updated_cpp.Bk_minus_3) {
        for(i=0; i<21; i++) {
            cpg_update_Bk_minus_3(i, CPG_Params_cpp.Bk_minus_3[i]);
        }
    }
    if (CPG_Updated_cpp.Bk_plus_3) {
        for(i=0; i<21; i++) {
            cpg_update_Bk_plus_3(i, CPG_Params_cpp.Bk_plus_3[i]);
        }
    }
    if (CPG_Updated_cpp.Ak_4) {
        for(i=0; i<49; i++) {
            cpg_update_Ak_4(i, CPG_Params_cpp.Ak_4[i]);
        }
    }
    if (CPG_Updated_cpp.Bk_minus_4) {
        for(i=0; i<21; i++) {
            cpg_update_Bk_minus_4(i, CPG_Params_cpp.Bk_minus_4[i]);
        }
    }
    if (CPG_Updated_cpp.Bk_plus_4) {
        for(i=0; i<21; i++) {
            cpg_update_Bk_plus_4(i, CPG_Params_cpp.Bk_plus_4[i]);
        }
    }
    if (CPG_Updated_cpp.Ak_5) {
        for(i=0; i<49; i++) {
            cpg_update_Ak_5(i, CPG_Params_cpp.Ak_5[i]);
        }
    }
    if (CPG_Updated_cpp.Bk_minus_5) {
        for(i=0; i<21; i++) {
            cpg_update_Bk_minus_5(i, CPG_Params_cpp.Bk_minus_5[i]);
        }
    }
    if (CPG_Updated_cpp.Bk_plus_5) {
        for(i=0; i<21; i++) {
            cpg_update_Bk_plus_5(i, CPG_Params_cpp.Bk_plus_5[i]);
        }
    }
    if (CPG_Updated_cpp.Ak_6) {
        for(i=0; i<49; i++) {
            cpg_update_Ak_6(i, CPG_Params_cpp.Ak_6[i]);
        }
    }
    if (CPG_Updated_cpp.Bk_minus_6) {
        for(i=0; i<21; i++) {
            cpg_update_Bk_minus_6(i, CPG_Params_cpp.Bk_minus_6[i]);
        }
    }
    if (CPG_Updated_cpp.Bk_plus_6) {
        for(i=0; i<21; i++) {
            cpg_update_Bk_plus_6(i, CPG_Params_cpp.Bk_plus_6[i]);
        }
    }
    if (CPG_Updated_cpp.Ak_7) {
        for(i=0; i<49; i++) {
            cpg_update_Ak_7(i, CPG_Params_cpp.Ak_7[i]);
        }
    }
    if (CPG_Updated_cpp.Bk_minus_7) {
        for(i=0; i<21; i++) {
            cpg_update_Bk_minus_7(i, CPG_Params_cpp.Bk_minus_7[i]);
        }
    }
    if (CPG_Updated_cpp.Bk_plus_7) {
        for(i=0; i<21; i++) {
            cpg_update_Bk_plus_7(i, CPG_Params_cpp.Bk_plus_7[i]);
        }
    }
    if (CPG_Updated_cpp.Ak_8) {
        for(i=0; i<49; i++) {
            cpg_update_Ak_8(i, CPG_Params_cpp.Ak_8[i]);
        }
    }
    if (CPG_Updated_cpp.Bk_minus_8) {
        for(i=0; i<21; i++) {
            cpg_update_Bk_minus_8(i, CPG_Params_cpp.Bk_minus_8[i]);
        }
    }
    if (CPG_Updated_cpp.Bk_plus_8) {
        for(i=0; i<21; i++) {
            cpg_update_Bk_plus_8(i, CPG_Params_cpp.Bk_plus_8[i]);
        }
    }
    if (CPG_Updated_cpp.Ak_9) {
        for(i=0; i<49; i++) {
            cpg_update_Ak_9(i, CPG_Params_cpp.Ak_9[i]);
        }
    }
    if (CPG_Updated_cpp.Bk_minus_9) {
        for(i=0; i<21; i++) {
            cpg_update_Bk_minus_9(i, CPG_Params_cpp.Bk_minus_9[i]);
        }
    }
    if (CPG_Updated_cpp.Bk_plus_9) {
        for(i=0; i<21; i++) {
            cpg_update_Bk_plus_9(i, CPG_Params_cpp.Bk_plus_9[i]);
        }
    }
    if (CPG_Updated_cpp.Ak_10) {
        for(i=0; i<49; i++) {
            cpg_update_Ak_10(i, CPG_Params_cpp.Ak_10[i]);
        }
    }
    if (CPG_Updated_cpp.Bk_minus_10) {
        for(i=0; i<21; i++) {
            cpg_update_Bk_minus_10(i, CPG_Params_cpp.Bk_minus_10[i]);
        }
    }
    if (CPG_Updated_cpp.Bk_plus_10) {
        for(i=0; i<21; i++) {
            cpg_update_Bk_plus_10(i, CPG_Params_cpp.Bk_plus_10[i]);
        }
    }
    if (CPG_Updated_cpp.Ak_11) {
        for(i=0; i<49; i++) {
            cpg_update_Ak_11(i, CPG_Params_cpp.Ak_11[i]);
        }
    }
    if (CPG_Updated_cpp.Bk_minus_11) {
        for(i=0; i<21; i++) {
            cpg_update_Bk_minus_11(i, CPG_Params_cpp.Bk_minus_11[i]);
        }
    }
    if (CPG_Updated_cpp.Bk_plus_11) {
        for(i=0; i<21; i++) {
            cpg_update_Bk_plus_11(i, CPG_Params_cpp.Bk_plus_11[i]);
        }
    }
    if (CPG_Updated_cpp.Ak_12) {
        for(i=0; i<49; i++) {
            cpg_update_Ak_12(i, CPG_Params_cpp.Ak_12[i]);
        }
    }
    if (CPG_Updated_cpp.Bk_minus_12) {
        for(i=0; i<21; i++) {
            cpg_update_Bk_minus_12(i, CPG_Params_cpp.Bk_minus_12[i]);
        }
    }
    if (CPG_Updated_cpp.Bk_plus_12) {
        for(i=0; i<21; i++) {
            cpg_update_Bk_plus_12(i, CPG_Params_cpp.Bk_plus_12[i]);
        }
    }
    if (CPG_Updated_cpp.Ak_13) {
        for(i=0; i<49; i++) {
            cpg_update_Ak_13(i, CPG_Params_cpp.Ak_13[i]);
        }
    }
    if (CPG_Updated_cpp.Bk_minus_13) {
        for(i=0; i<21; i++) {
            cpg_update_Bk_minus_13(i, CPG_Params_cpp.Bk_minus_13[i]);
        }
    }
    if (CPG_Updated_cpp.Bk_plus_13) {
        for(i=0; i<21; i++) {
            cpg_update_Bk_plus_13(i, CPG_Params_cpp.Bk_plus_13[i]);
        }
    }
    if (CPG_Updated_cpp.x_0) {
        for(i=0; i<7; i++) {
            cpg_update_x_0(i, CPG_Params_cpp.x_0[i]);
        }
    }
    if (CPG_Updated_cpp.x_ref) {
        for(i=0; i<105; i++) {
            cpg_update_x_ref(i, CPG_Params_cpp.x_ref[i]);
        }
    }
    if (CPG_Updated_cpp.u_ref) {
        for(i=0; i<45; i++) {
            cpg_update_u_ref(i, CPG_Params_cpp.u_ref[i]);
        }
    }

    // Solve
    std::clock_t ASA_start = std::clock();
    cpg_solve();
    std::clock_t ASA_end = std::clock();

    // Arrange and return results
    CPG_Prim_cpp_t CPG_Prim_cpp {};
    for(i=0; i<45; i++) {
        CPG_Prim_cpp.U[i] = CPG_Prim.U[i];
    }
    for(i=0; i<2; i++) {
        CPG_Prim_cpp.var1376[i] = CPG_Prim.var1376[i];
    }
    for(i=0; i<98; i++) {
        CPG_Prim_cpp.V[i] = CPG_Prim.V[i];
    }
    for(i=0; i<7; i++) {
        CPG_Prim_cpp.v_0[i] = CPG_Prim.v_0[i];
    }
    for(i=0; i<6; i++) {
        CPG_Prim_cpp.v_N[i] = CPG_Prim.v_N[i];
    }
    for(i=0; i<15; i++) {
        CPG_Prim_cpp.eta[i] = CPG_Prim.eta[i];
    }
    for(i=0; i<105; i++) {
        CPG_Prim_cpp.X[i] = CPG_Prim.X[i];
    }
    CPG_Dual_cpp_t CPG_Dual_cpp {};
    for(i=0; i<7; i++) {
        CPG_Dual_cpp.d0[i] = CPG_Dual.d0[i];
    }
    for(i=0; i<7; i++) {
        CPG_Dual_cpp.d1[i] = CPG_Dual.d1[i];
    }
    for(i=0; i<7; i++) {
        CPG_Dual_cpp.d2[i] = CPG_Dual.d2[i];
    }
    for(i=0; i<7; i++) {
        CPG_Dual_cpp.d3[i] = CPG_Dual.d3[i];
    }
    for(i=0; i<7; i++) {
        CPG_Dual_cpp.d4[i] = CPG_Dual.d4[i];
    }
    for(i=0; i<7; i++) {
        CPG_Dual_cpp.d5[i] = CPG_Dual.d5[i];
    }
    for(i=0; i<7; i++) {
        CPG_Dual_cpp.d6[i] = CPG_Dual.d6[i];
    }
    for(i=0; i<7; i++) {
        CPG_Dual_cpp.d7[i] = CPG_Dual.d7[i];
    }
    for(i=0; i<7; i++) {
        CPG_Dual_cpp.d8[i] = CPG_Dual.d8[i];
    }
    for(i=0; i<7; i++) {
        CPG_Dual_cpp.d9[i] = CPG_Dual.d9[i];
    }
    for(i=0; i<7; i++) {
        CPG_Dual_cpp.d10[i] = CPG_Dual.d10[i];
    }
    for(i=0; i<7; i++) {
        CPG_Dual_cpp.d11[i] = CPG_Dual.d11[i];
    }
    for(i=0; i<7; i++) {
        CPG_Dual_cpp.d12[i] = CPG_Dual.d12[i];
    }
    for(i=0; i<7; i++) {
        CPG_Dual_cpp.d13[i] = CPG_Dual.d13[i];
    }
    for(i=0; i<15; i++) {
        CPG_Dual_cpp.d14[i] = CPG_Dual.d14[i];
    }
    for(i=0; i<15; i++) {
        CPG_Dual_cpp.d15[i] = CPG_Dual.d15[i];
    }
    for(i=0; i<15; i++) {
        CPG_Dual_cpp.d16[i] = CPG_Dual.d16[i];
    }
    for(i=0; i<15; i++) {
        CPG_Dual_cpp.d17[i] = CPG_Dual.d17[i];
    }
    for(i=0; i<15; i++) {
        CPG_Dual_cpp.d18[i] = CPG_Dual.d18[i];
    }
    for(i=0; i<15; i++) {
        CPG_Dual_cpp.d19[i] = CPG_Dual.d19[i];
    }
    for(i=0; i<15; i++) {
        CPG_Dual_cpp.d20[i] = CPG_Dual.d20[i];
    }
    for(i=0; i<2; i++) {
        CPG_Dual_cpp.d21[i] = CPG_Dual.d21[i];
    }
    for(i=0; i<49; i++) {
        CPG_Dual_cpp.d22[i] = CPG_Dual.d22[i];
    }
    for(i=0; i<4; i++) {
        CPG_Dual_cpp.d23[i] = CPG_Dual.d23[i];
    }
    for(i=0; i<4; i++) {
        CPG_Dual_cpp.d24[i] = CPG_Dual.d24[i];
    }
    CPG_Dual_cpp.d25 = CPG_Dual.d25;
    CPG_Dual_cpp.d26 = CPG_Dual.d26;
    for(i=0; i<15; i++) {
        CPG_Dual_cpp.d27[i] = CPG_Dual.d27[i];
    }
    CPG_Info_cpp_t CPG_Info_cpp {};
    CPG_Info_cpp.obj_val = CPG_Info.obj_val;
    CPG_Info_cpp.iter = CPG_Info.iter;
    CPG_Info_cpp.status = CPG_Info.status;
    CPG_Info_cpp.pri_res = CPG_Info.pri_res;
    CPG_Info_cpp.dua_res = CPG_Info.dua_res;
    CPG_Info_cpp.time = 1.0 * (ASA_end - ASA_start) / CLOCKS_PER_SEC;
    CPG_Result_cpp_t CPG_Result_cpp {};
    CPG_Result_cpp.prim = CPG_Prim_cpp;
    CPG_Result_cpp.dual = CPG_Dual_cpp;
    CPG_Result_cpp.info = CPG_Info_cpp;
    return CPG_Result_cpp;

}

PYBIND11_MODULE(cpg_module, m) {

    py::class_<CPG_Params_cpp_t>(m, "cpg_params")
            .def(py::init<>())
            .def_readwrite("Ak_0", &CPG_Params_cpp_t::Ak_0)
            .def_readwrite("Bk_minus_0", &CPG_Params_cpp_t::Bk_minus_0)
            .def_readwrite("Bk_plus_0", &CPG_Params_cpp_t::Bk_plus_0)
            .def_readwrite("ck", &CPG_Params_cpp_t::ck)
            .def_readwrite("Ak_1", &CPG_Params_cpp_t::Ak_1)
            .def_readwrite("Bk_minus_1", &CPG_Params_cpp_t::Bk_minus_1)
            .def_readwrite("Bk_plus_1", &CPG_Params_cpp_t::Bk_plus_1)
            .def_readwrite("Ak_2", &CPG_Params_cpp_t::Ak_2)
            .def_readwrite("Bk_minus_2", &CPG_Params_cpp_t::Bk_minus_2)
            .def_readwrite("Bk_plus_2", &CPG_Params_cpp_t::Bk_plus_2)
            .def_readwrite("Ak_3", &CPG_Params_cpp_t::Ak_3)
            .def_readwrite("Bk_minus_3", &CPG_Params_cpp_t::Bk_minus_3)
            .def_readwrite("Bk_plus_3", &CPG_Params_cpp_t::Bk_plus_3)
            .def_readwrite("Ak_4", &CPG_Params_cpp_t::Ak_4)
            .def_readwrite("Bk_minus_4", &CPG_Params_cpp_t::Bk_minus_4)
            .def_readwrite("Bk_plus_4", &CPG_Params_cpp_t::Bk_plus_4)
            .def_readwrite("Ak_5", &CPG_Params_cpp_t::Ak_5)
            .def_readwrite("Bk_minus_5", &CPG_Params_cpp_t::Bk_minus_5)
            .def_readwrite("Bk_plus_5", &CPG_Params_cpp_t::Bk_plus_5)
            .def_readwrite("Ak_6", &CPG_Params_cpp_t::Ak_6)
            .def_readwrite("Bk_minus_6", &CPG_Params_cpp_t::Bk_minus_6)
            .def_readwrite("Bk_plus_6", &CPG_Params_cpp_t::Bk_plus_6)
            .def_readwrite("Ak_7", &CPG_Params_cpp_t::Ak_7)
            .def_readwrite("Bk_minus_7", &CPG_Params_cpp_t::Bk_minus_7)
            .def_readwrite("Bk_plus_7", &CPG_Params_cpp_t::Bk_plus_7)
            .def_readwrite("Ak_8", &CPG_Params_cpp_t::Ak_8)
            .def_readwrite("Bk_minus_8", &CPG_Params_cpp_t::Bk_minus_8)
            .def_readwrite("Bk_plus_8", &CPG_Params_cpp_t::Bk_plus_8)
            .def_readwrite("Ak_9", &CPG_Params_cpp_t::Ak_9)
            .def_readwrite("Bk_minus_9", &CPG_Params_cpp_t::Bk_minus_9)
            .def_readwrite("Bk_plus_9", &CPG_Params_cpp_t::Bk_plus_9)
            .def_readwrite("Ak_10", &CPG_Params_cpp_t::Ak_10)
            .def_readwrite("Bk_minus_10", &CPG_Params_cpp_t::Bk_minus_10)
            .def_readwrite("Bk_plus_10", &CPG_Params_cpp_t::Bk_plus_10)
            .def_readwrite("Ak_11", &CPG_Params_cpp_t::Ak_11)
            .def_readwrite("Bk_minus_11", &CPG_Params_cpp_t::Bk_minus_11)
            .def_readwrite("Bk_plus_11", &CPG_Params_cpp_t::Bk_plus_11)
            .def_readwrite("Ak_12", &CPG_Params_cpp_t::Ak_12)
            .def_readwrite("Bk_minus_12", &CPG_Params_cpp_t::Bk_minus_12)
            .def_readwrite("Bk_plus_12", &CPG_Params_cpp_t::Bk_plus_12)
            .def_readwrite("Ak_13", &CPG_Params_cpp_t::Ak_13)
            .def_readwrite("Bk_minus_13", &CPG_Params_cpp_t::Bk_minus_13)
            .def_readwrite("Bk_plus_13", &CPG_Params_cpp_t::Bk_plus_13)
            .def_readwrite("x_0", &CPG_Params_cpp_t::x_0)
            .def_readwrite("x_ref", &CPG_Params_cpp_t::x_ref)
            .def_readwrite("u_ref", &CPG_Params_cpp_t::u_ref)
            ;

    py::class_<CPG_Updated_cpp_t>(m, "cpg_updated")
            .def(py::init<>())
            .def_readwrite("Ak_0", &CPG_Updated_cpp_t::Ak_0)
            .def_readwrite("Bk_minus_0", &CPG_Updated_cpp_t::Bk_minus_0)
            .def_readwrite("Bk_plus_0", &CPG_Updated_cpp_t::Bk_plus_0)
            .def_readwrite("ck", &CPG_Updated_cpp_t::ck)
            .def_readwrite("Ak_1", &CPG_Updated_cpp_t::Ak_1)
            .def_readwrite("Bk_minus_1", &CPG_Updated_cpp_t::Bk_minus_1)
            .def_readwrite("Bk_plus_1", &CPG_Updated_cpp_t::Bk_plus_1)
            .def_readwrite("Ak_2", &CPG_Updated_cpp_t::Ak_2)
            .def_readwrite("Bk_minus_2", &CPG_Updated_cpp_t::Bk_minus_2)
            .def_readwrite("Bk_plus_2", &CPG_Updated_cpp_t::Bk_plus_2)
            .def_readwrite("Ak_3", &CPG_Updated_cpp_t::Ak_3)
            .def_readwrite("Bk_minus_3", &CPG_Updated_cpp_t::Bk_minus_3)
            .def_readwrite("Bk_plus_3", &CPG_Updated_cpp_t::Bk_plus_3)
            .def_readwrite("Ak_4", &CPG_Updated_cpp_t::Ak_4)
            .def_readwrite("Bk_minus_4", &CPG_Updated_cpp_t::Bk_minus_4)
            .def_readwrite("Bk_plus_4", &CPG_Updated_cpp_t::Bk_plus_4)
            .def_readwrite("Ak_5", &CPG_Updated_cpp_t::Ak_5)
            .def_readwrite("Bk_minus_5", &CPG_Updated_cpp_t::Bk_minus_5)
            .def_readwrite("Bk_plus_5", &CPG_Updated_cpp_t::Bk_plus_5)
            .def_readwrite("Ak_6", &CPG_Updated_cpp_t::Ak_6)
            .def_readwrite("Bk_minus_6", &CPG_Updated_cpp_t::Bk_minus_6)
            .def_readwrite("Bk_plus_6", &CPG_Updated_cpp_t::Bk_plus_6)
            .def_readwrite("Ak_7", &CPG_Updated_cpp_t::Ak_7)
            .def_readwrite("Bk_minus_7", &CPG_Updated_cpp_t::Bk_minus_7)
            .def_readwrite("Bk_plus_7", &CPG_Updated_cpp_t::Bk_plus_7)
            .def_readwrite("Ak_8", &CPG_Updated_cpp_t::Ak_8)
            .def_readwrite("Bk_minus_8", &CPG_Updated_cpp_t::Bk_minus_8)
            .def_readwrite("Bk_plus_8", &CPG_Updated_cpp_t::Bk_plus_8)
            .def_readwrite("Ak_9", &CPG_Updated_cpp_t::Ak_9)
            .def_readwrite("Bk_minus_9", &CPG_Updated_cpp_t::Bk_minus_9)
            .def_readwrite("Bk_plus_9", &CPG_Updated_cpp_t::Bk_plus_9)
            .def_readwrite("Ak_10", &CPG_Updated_cpp_t::Ak_10)
            .def_readwrite("Bk_minus_10", &CPG_Updated_cpp_t::Bk_minus_10)
            .def_readwrite("Bk_plus_10", &CPG_Updated_cpp_t::Bk_plus_10)
            .def_readwrite("Ak_11", &CPG_Updated_cpp_t::Ak_11)
            .def_readwrite("Bk_minus_11", &CPG_Updated_cpp_t::Bk_minus_11)
            .def_readwrite("Bk_plus_11", &CPG_Updated_cpp_t::Bk_plus_11)
            .def_readwrite("Ak_12", &CPG_Updated_cpp_t::Ak_12)
            .def_readwrite("Bk_minus_12", &CPG_Updated_cpp_t::Bk_minus_12)
            .def_readwrite("Bk_plus_12", &CPG_Updated_cpp_t::Bk_plus_12)
            .def_readwrite("Ak_13", &CPG_Updated_cpp_t::Ak_13)
            .def_readwrite("Bk_minus_13", &CPG_Updated_cpp_t::Bk_minus_13)
            .def_readwrite("Bk_plus_13", &CPG_Updated_cpp_t::Bk_plus_13)
            .def_readwrite("x_0", &CPG_Updated_cpp_t::x_0)
            .def_readwrite("x_ref", &CPG_Updated_cpp_t::x_ref)
            .def_readwrite("u_ref", &CPG_Updated_cpp_t::u_ref)
            ;

    py::class_<CPG_Prim_cpp_t>(m, "cpg_prim")
            .def(py::init<>())
            .def_readwrite("U", &CPG_Prim_cpp_t::U)
            .def_readwrite("var1376", &CPG_Prim_cpp_t::var1376)
            .def_readwrite("V", &CPG_Prim_cpp_t::V)
            .def_readwrite("v_0", &CPG_Prim_cpp_t::v_0)
            .def_readwrite("v_N", &CPG_Prim_cpp_t::v_N)
            .def_readwrite("eta", &CPG_Prim_cpp_t::eta)
            .def_readwrite("X", &CPG_Prim_cpp_t::X)
            ;

    py::class_<CPG_Dual_cpp_t>(m, "cpg_dual")
            .def(py::init<>())
            .def_readwrite("d0", &CPG_Dual_cpp_t::d0)
            .def_readwrite("d1", &CPG_Dual_cpp_t::d1)
            .def_readwrite("d2", &CPG_Dual_cpp_t::d2)
            .def_readwrite("d3", &CPG_Dual_cpp_t::d3)
            .def_readwrite("d4", &CPG_Dual_cpp_t::d4)
            .def_readwrite("d5", &CPG_Dual_cpp_t::d5)
            .def_readwrite("d6", &CPG_Dual_cpp_t::d6)
            .def_readwrite("d7", &CPG_Dual_cpp_t::d7)
            .def_readwrite("d8", &CPG_Dual_cpp_t::d8)
            .def_readwrite("d9", &CPG_Dual_cpp_t::d9)
            .def_readwrite("d10", &CPG_Dual_cpp_t::d10)
            .def_readwrite("d11", &CPG_Dual_cpp_t::d11)
            .def_readwrite("d12", &CPG_Dual_cpp_t::d12)
            .def_readwrite("d13", &CPG_Dual_cpp_t::d13)
            .def_readwrite("d14", &CPG_Dual_cpp_t::d14)
            .def_readwrite("d15", &CPG_Dual_cpp_t::d15)
            .def_readwrite("d16", &CPG_Dual_cpp_t::d16)
            .def_readwrite("d17", &CPG_Dual_cpp_t::d17)
            .def_readwrite("d18", &CPG_Dual_cpp_t::d18)
            .def_readwrite("d19", &CPG_Dual_cpp_t::d19)
            .def_readwrite("d20", &CPG_Dual_cpp_t::d20)
            .def_readwrite("d21", &CPG_Dual_cpp_t::d21)
            .def_readwrite("d22", &CPG_Dual_cpp_t::d22)
            .def_readwrite("d23", &CPG_Dual_cpp_t::d23)
            .def_readwrite("d24", &CPG_Dual_cpp_t::d24)
            .def_readwrite("d25", &CPG_Dual_cpp_t::d25)
            .def_readwrite("d26", &CPG_Dual_cpp_t::d26)
            .def_readwrite("d27", &CPG_Dual_cpp_t::d27)
            ;

    py::class_<CPG_Info_cpp_t>(m, "cpg_info")
            .def(py::init<>())
            .def_readwrite("obj_val", &CPG_Info_cpp_t::obj_val)
            .def_readwrite("iter", &CPG_Info_cpp_t::iter)
            .def_readwrite("status", &CPG_Info_cpp_t::status)
            .def_readwrite("pri_res", &CPG_Info_cpp_t::pri_res)
            .def_readwrite("dua_res", &CPG_Info_cpp_t::dua_res)
            .def_readwrite("time", &CPG_Info_cpp_t::time)
            ;

    py::class_<CPG_Result_cpp_t>(m, "cpg_result")
            .def(py::init<>())
            .def_readwrite("cpg_prim", &CPG_Result_cpp_t::prim)
            .def_readwrite("cpg_dual", &CPG_Result_cpp_t::dual)
            .def_readwrite("cpg_info", &CPG_Result_cpp_t::info)
            ;

    m.def("solve", &solve_cpp);

    m.def("set_solver_default_settings", &cpg_set_solver_default_settings);
    m.def("set_solver_max_iters", &cpg_set_solver_max_iters);
    m.def("set_solver_bisect_iters", &cpg_set_solver_bisect_iters);
    m.def("set_solver_ruiz_iters", &cpg_set_solver_ruiz_iters);
    m.def("set_solver_iter_ref_iters", &cpg_set_solver_iter_ref_iters);
    m.def("set_solver_kkt_static_reg", &cpg_set_solver_kkt_static_reg);
    m.def("set_solver_kkt_dynamic_reg", &cpg_set_solver_kkt_dynamic_reg);
    m.def("set_solver_abstol", &cpg_set_solver_abstol);
    m.def("set_solver_reltol", &cpg_set_solver_reltol);
    m.def("set_solver_abstol_inacc", &cpg_set_solver_abstol_inacc);
    m.def("set_solver_reltol_inacc", &cpg_set_solver_reltol_inacc);
    m.def("set_solver_verbose", &cpg_set_solver_verbose);

}
